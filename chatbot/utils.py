import os, requests, json
from pydantic import BaseModel, parse_obj_as
from typing import List, Dict

TOKEN = os.getenv('GPN_CHATBOT_TOKEN')
URL = os.getenv('GPN_API_URL')

WELCOME_MESSAGE = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 
–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
–ü–æ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã."""

FEEDBACK_MESSAGE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!"

ERROR_MESSAGE = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."

TEMPLATE = """*–ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –í–û–ü–†–û–°–´* ‚ùì:

{question}

==========

*–ü–û–î–•–û–î–Ø–©–ò–ï –ß–ê–ù–ö–ò –¢–ï–ö–¢–ê –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô* üìö:

{meta}

==========

*–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢* üì©:

{answer}"""

class DocumentProvisionReference(BaseModel):
    content: str
    meta: Dict[str, str]


class ComplexQueryAnswerResponse(BaseModel):
    question: str
    answer: str
    sources: str
    provisions: List[DocumentProvisionReference]


class StringListResponse(BaseModel):
    response: List[str]

# def query_docs(body, template_id=1) -> ComplexQueryAnswerResponse:
    
#     url = f"{URL}/api/docs/query/{template_id}"
#     headers = {"Content-Type": "text/plain"}
    
#     response = requests.post(url, data=body, headers=headers)
#     if response.status_code == 200:
#         # Parse the response JSON into a ComplexQueryAnswerResponse object
#         return ComplexQueryAnswerResponse.parse_obj(response.json())
#     else:
#         return {"error": f"Failed with status code {response.status_code}"}
    
def query_docs(template_id, body) -> ComplexQueryAnswerResponse:
    url = f"http://localhost:8000/api/docs/query/{template_id}"
    headers = {"Content-Type": "text/plain"}
    response = requests.post(url, data=body, headers=headers)
    if response.status_code == 200:
        # Parse the response JSON into a ComplexQueryAnswerResponse object
        return ComplexQueryAnswerResponse.parse_obj(response.json())
    else:
        return {"error": f"Failed with status code {response.status_code}"}


def find_doc_provisions(body) -> StringListResponse:
    url = "http://localhost:8000/api/docs/provisions"
    headers = {"Content-Type": "text/plain"}
    response = requests.post(url, data=body, headers=headers)
    if response.status_code == 200:
        # Parse the response JSON into a StringListResponse object
        return StringListResponse.parse_obj(response.json())
    else:
        return {"error": f"Failed with status code {response.status_code}"}

# def find_doc_provisions(body) -> StringListResponse:
#     url = f"{URL}/api/docs/provisions"
#     headers = {"Content-Type": "text/plain"}
    
#     response = requests.post(url, data=body, headers=headers)
#     if response.status_code == 200:
#         # Parse the response JSON into a StringListResponse object
#         return StringListResponse.parse_obj(response.json())
#     else:
#         return {"error": f"Failed with status code {response.status_code}"}

def convert_to_utf8(text):
    try:
        text.encode('utf-8').decode('utf-8')
    except UnicodeDecodeError:
        text = text.encode('latin1').decode('utf-8')
    
    return text

def parse_model_response(response: dict) -> tuple:
    
    question = response["question"]
    answer = response["answer"]
    provisions = response["provisions"]

    contents = set()
    metas = set()
    
    for i in provisions:
        meta = ", ".join(i["meta"].values())
        content_text = i["content"]
        content = ":\n".join([meta, content_text])
        metas.update([meta])
        contents.update([content])
    
    meta = "\n".join(metas)
    model_answer = TEMPLATE.format(question=question, meta=meta, answer=answer)
    
    return model_answer, tuple(contents)


def get_model_response_from_api(text: str):
    
    url = f"{URL}/api/docs/query/1"
    headers = {'Content-type': 'text/plain'}
    
    response = requests.post(url, data=text, headers=headers)
    
    if response.status_code == 200:
        return parse_model_response(response.json())
    return (ERROR_MESSAGE, (ERROR_MESSAGE,))


if __name__ == "__main__":
    query = '''
    –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏,
    
    –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–ù–ú–¶) –ø—Ä–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Å —Ä–∞–º–æ—á–Ω—ã–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤.
    
    –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –¥–æ–ø—É—Å—Ç–∏–º–æ –ª–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ù–ú–¶ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –æ–±—ä–µ–º, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏? –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–º–æ—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–º–∞, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏, —É–º–Ω–æ–∂–µ–Ω–Ω—É—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –µ–¥–∏–Ω–∏—á–Ω—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ù–ú–¶?
    
    –ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ –≤–∞—à–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–æ—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
    
    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
    
    [–í–∞—à–µ –ò–º—è]
    [–í–∞—à–∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å]
    [–í–∞—à–∞ –ö–æ–º–ø–∞–Ω–∏—è]
    '''

    print("getting asnwer....")
    answer = query_docs(1, query)
    print(answer)
    print("=======================================================")
    
    print("getting provisions....")
    provisions = find_doc_provisions("1.1")
    print(provisions)
    print("=======================================================")